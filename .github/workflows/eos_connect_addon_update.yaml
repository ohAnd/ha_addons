name: EOS-Connect HA Addon Update

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  check_changed_files:
    runs-on: ubuntu-latest
    name: Check for changed files
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4.2.2
        with:
          submodules: true # Ensure submodules are checked out

      - name: Clean submodule /eos_connect/src
        run: |
          git submodule foreach --recursive git reset --hard
          git submodule foreach --recursive git clean -fd

      - name: Update submodule Pt I /eos_connect/src
        run: |
          git submodule update --init --recursive
          echo "Submodule eos_connect/src updated."

      - name: Get current commit hash of submodule eos_connect/src
        id: get_current_commit_hash
        run: |
          cd eos_connect/src
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo ">>>>>> Current commit hash of eos_connect/src: $(git rev-parse HEAD)"

      - name: Update submodule Pt II /eos_connect/src
        run: |
          git submodule update --remote eos_connect/src
          echo "Submodule eos_connect/src updated to latest commit."

      - name: Get new commit hash of submodule eos_connect/src
        id: get_new_commit_hash
        run: |
          cd eos_connect/src
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo ">>>>>> New commit hash of eos_connect/src: $(git rev-parse HEAD)"

      - name: Check for changes in specific files between commits
        id: check_changes
        run: |
          echo "Checking for changes in eos_connect/src/src/config.py between commits..."
          cd eos_connect/src
          git diff ${{ steps.get_current_commit_hash.outputs.commit_hash }} ${{ steps.get_new_commit_hash.outputs.commit_hash }} -- src/config.py CONFIG_README.md > ../changes.diff
          
          if [ -s ../changes.diff ]; then
            echo "Detected changes in the following files:"
            cat ../changes.diff
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in src/config.py or CONFIG_README.md."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
          rm -f ../changes.diff

      - name: Stop workflow if config changed
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          echo "EOS connect config changed - has to be released manually"
          exit 1
      
      - name: Collect all commit messages of submodule eos_connect/src between commits
        id: get_commit_messages
        if: steps.check_changes.outputs.changed == 'false'
        run: |
          cd eos_connect/src
          git log --pretty=format:"%s" ${{ steps.get_current_commit_hash.outputs.commit_hash }}..${{ steps.get_new_commit_hash.outputs.commit_hash }} > ../commit_messages.txt
          
          if [ -s ../commit_messages.txt ]; then
            commit_messages=$(cat ../commit_messages.txt | tr '\n' ';')
            commit_count=$(echo "$commit_messages" | tr -cd ';' | wc -c)
            echo ">> Number of commits of this release: $commit_count"
            echo "commit_messages=$commit_messages" >> $GITHUB_OUTPUT
          else
            echo "No commit messages found. Skipping."
            exit 1
          fi
          rm -f ../commit_messages.txt
        
      - name: get the current version
        id: get_current_version
        run: |
            # Extracts the first commit message that starts with "[AUTO] Update version to ",
            # removes the prefix, and assigns the version to the variable 'first_auto_update'.
            first_auto_update=$(echo "${{ steps.get_commit_messages.outputs.commit_messages }}" | tr ';' '\n' | grep "^\[AUTO\] Update version to snapshot-v" | head -n 1 | sed 's/^\[AUTO\] Update version to snapshot-v//')
            echo "current_version=$first_auto_update" >> $GITHUB_OUTPUT
            echo ">> Current Version = $first_auto_update"

      - name: get cleaned commit messages
        id: get_cleaned_commit_messages
        run: |
            filtered_messages=$(echo "${{ steps.get_commit_messages.outputs.commit_messages }}" | tr ';' '\n' | grep -v "^\[AUTO\]" | grep -v "^Merge pull" | grep -v "^Merge branch" | tr '\n' ';')
            echo "filtered_commit_messages=$filtered_messages" >> $GITHUB_OUTPUT
      
      - name: get all features
        id: get_all_features
        run: |
            # Extracts all commit messages that start with "feat:" and assigns them to the variable 'features'.
            features=$(echo "${{ steps.get_cleaned_commit_messages.outputs.filtered_commit_messages }}" | tr ';' '\n' | grep "^feat:" | tr '\n' ';')
            echo "features=$features" >> $GITHUB_OUTPUT
      
      - name: get all fixes
        id: get_all_fixes
        run: |
            # Extracts all commit messages that start with "fix:" and assigns them to the variable 'fixes'.
            fixes=$(echo "${{ steps.get_cleaned_commit_messages.outputs.filtered_commit_messages }}" | tr ';' '\n' | grep "^fix:" | tr '\n' ';')
            echo "fixes=$fixes" >> $GITHUB_OUTPUT
      
      - name: get all other messages
        id: get_all_other_messages
        run: |
            # Extracts all commit messages that do not start with "feat:" or "fix:" and assigns them to the variable 'other_messages'.
            other_messages=$(echo "${{ steps.get_cleaned_commit_messages.outputs.filtered_commit_messages }}" | tr ';' '\n' | grep -v "^feat:" | grep -v "^fix:" | tr '\n' ';')
            echo "other_messages=$other_messages" >> $GITHUB_OUTPUT

      - name: writing eos_connect/CHANGELOG.md
        id: write_changelog
        run: |
            # Writes the changelog to eos_connect/CHANGELOG.md using the commit messages and version information.
            echo "Writing changelog..."
            # **Version 0.0.26** published on 17.04.2025
            changelog="**Version ${{ steps.get_current_version.outputs.current_version }}** published on $(date +'%Y-%m-%d')\n"
            changelog+="- Features\n"
            changelog+=$(echo "${{ steps.get_all_features.outputs.features }}" | tr ';' '\n' | sed '/^$/d' | sed 's/^/    - /')"\n"
            changelog+="- Fixes\n"
            changelog+=$(echo "${{ steps.get_all_fixes.outputs.fixes }}" | tr ';' '\n' | sed '/^$/d' | sed 's/^/    - /')"\n"
            changelog+="- Other Changes\n"
            changelog+=$(echo "${{ steps.get_all_other_messages.outputs.other_messages }}" | tr ';' '\n' | sed '/^$/d' | sed 's/^/    - /')"\n"

            echo -e "$changelog\n$(cat eos_connect/CHANGELOG.md)" > eos_connect/CHANGELOG.md

      - name: replace version in eos_connect/config.yaml
        id: replace_version
        run: |
            # Replaces the version in eos_connect/config.yaml with the new version.
            echo "Replacing version in eos_connect/config.yaml..."
            sed -i "s/version: \".*\"/version: \"${{ steps.get_current_version.outputs.current_version }}\"/" eos_connect/config.yaml
            echo "Version replaced in eos_connect/config.yaml."

      - name: Commit the changed files and push changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit_prefix: "[EOS-Connect] "
          commit_message: "Automatic update to version ${{ steps.get_current_version.outputs.current_version }} with auto updated CHANGELOG.md"
